//-------------------------------------------------------------------------
//    fighter.sv                                                            --
//    Viral Mehta                                                        --
//    Spring 2005                                                        --
//                                                                       --
//    Modified by Stephen Kempf 03-01-2006                               --
//                              03-12-2007                               --
//    Translated by Joe Meng    07-07-2013                               --
//    Modified by Po-Han Huang  12-08-2017                               --
//    Spring 2018 Distribution                                           --
//                                                                       --
//    For use with ECE 385 Lab 8                                         --
//    UIUC ECE Department                                                --
//-------------------------------------------------------------------------


module  fighter ( input     Clk,                // 50 MHz clock
                            Reset,              // Active-high reset signal
                            frame_clk,          // The clock indicating a new frame (~60Hz)
                            is_left,
                input [9:0] DrawX, DrawY,       // Current pixel coordinates
				input [7:0] keycode,
         output logic [9:0] fighter_X_Pos, fighter_Y_Pos             // Whether current pixel belongs to fighter or background
              );
    
    parameter [9:0] fighter_X_BL = 10'd320;  // Center position on the X axis
    parameter [9:0] fighter_Y_BL = 10'd240;  // Center position on the Y axis
    parameter [9:0] fighter_X_Min = 10'd0;       // Leftmost point on the X axis
    parameter [9:0] fighter_X_Max = 10'd639;     // Rightmost point on the X axis
    parameter [9:0] fighter_Y_Min = 10'd119;       // Topmost point on the Y axis
    parameter [9:0] fighter_Y_Max = 10'd479;     // Bottommost point on the Y axis
    parameter [9:0] fighter_X_Step = 10'd1;      // Step size on the X axis
    parameter [9:0] fighter_Y_Step = 10'd1;      // Step size on the Y axis
    parameter [9:0] fighter_Height = 10'd105;      // fighter height
    parameter [9:0] fighter_Width = 10'd72;      // fighter width
    
    logic [9:0] fighter_X_Motion, fighter_Y_Pos, fighter_Y_Motion;
    logic [9:0] fighter_X_Pos_in, fighter_X_Motion_in, fighter_Y_Pos_in, fighter_Y_Motion_in;
    
    //////// Do not modify the always_ff blocks. ////////
    // Detect rising edge of frame_clk
    logic frame_clk_delayed, frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
        frame_clk_delayed <= frame_clk;
        frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
    end
    // Update registers
    always_ff @ (posedge Clk)
    begin
        if (Reset)
        begin
            fighter_X_Pos <= fighter_X_BL;
            fighter_Y_Pos <= fighter_Y_BL;
            fighter_X_Motion <= 10'd0;
            fighter_Y_Motion <= 10'd0;
        end
        else
        begin
            fighter_X_Pos <= fighter_X_Pos_in;
            fighter_Y_Pos <= fighter_Y_Pos_in;
            fighter_X_Motion <= fighter_X_Motion_in;
            fighter_Y_Motion <= fighter_Y_Motion_in;
        end
    end
    //////// Do not modify the always_ff blocks. ////////
    
    // You need to modify always_comb block.
    always_comb
    begin
        // By default, keep motion and position unchanged
        fighter_X_Pos_in = fighter_X_Pos;
        fighter_Y_Pos_in = fighter_Y_Pos;
        fighter_X_Motion_in = fighter_X_Motion;
        fighter_Y_Motion_in = fighter_Y_Motion;
        // Update position and motion only at rising edge of frame clock
        if (frame_clk_rising_edge)
        begin
				unique case(keycode[7:0])
				8'h04: //d = jump
				begin
                    if (fighter_Y_Motion == 10'd0)
                    begin
					    fighter_Y_Motion_in = (~ (fighter_Y_Step) + 1'd1);
                    else
				end
				8'h16://s = kick
				begin
                    if(fighter_Y_Motion != 10'd0)
                    begin
					    fighter_X_Motion_in = fighter_X_Step;
					    fighter_Y_Motion_in = fighter_Y_Step;
                    end

				end
				default:;
			endcase
            // Be careful when using comparators with "logic" datatype because compiler treats 
            //   both sides of the operator as UNSIGNED numbers.
            // e.g. fighter_Y_Pos - fighter_Size <= fighter_Y_Min 
            // If fighter_Y_Pos is 0, then fighter_Y_Pos - fighter_Size will not be -4, but rather a large positive number.
            if( fighter_Y_Pos >= fighter_Y_Max )  // fighter is at the bottom edge, BOUNCE!
                fighter_Y_Motion_in = 1'b0;  // 2's complement.  
            else if ( fighter_Y_Pos <= fighter_Y_Min + fighter_Height )  // fighter is at the top edge, BOUNCE!
                fighter_Y_Motion_in = fighter_Y_Step;
				else if( fighter_X_Pos + fighter_Width >= fighter_X_Max )  // fighter is at the bottom edge, BOUNCE!
                fighter_X_Motion_in = (~(fighter_X_Step) + 1'b1);  // 2's complement. 
				else if (fighter_X_Pos <= fighter_X_Min)
					 fighter_X_Motion_in = fighter_X_Step;
            fighter_X_Pos_in = fighter_X_Pos + fighter_X_Motion;
            fighter_Y_Pos_in = fighter_Y_Pos + fighter_Y_Motion;
        end
    end
    
endmodule
